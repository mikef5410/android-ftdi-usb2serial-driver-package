============================================
	Code modification plan
============================================


============================================
	Code reading summary
============================================
1. Where is the USB command processed?
The main_dumbreader.c code calls 3 functions:
	usb_out_process();
	usb_in_process();
	rc632_unthrottle();

The processing of USB command happens in usb_in_process(). This funtion locates in usb_handler.c.
In usb_in_process(), it first calls:

	rctx = req_ctx_find_get(0, RCTX_STATE_UDP_RCV_DONE, RCTX_STATE_MAIN_PROCESSING)

to get the USB request context data. And then calls 

	usb_in(rctx);
	
to process the usb request context data.
And finally calls 
	udp_unthrottle() 
to enable the usb interrupt request.

The entire USB command processing happens in usb_in(rctx).

2. How usb_in(rctx) process all the usb commands, especially RC632 commands?
A global static variable is defined in usb_handler.c:

	static usb_cmd_fn *cmd_hdlrs[16];

This is a list of all the usb command handler functions. In rc632.c, a function all is made:

void rc632_init(void){
	...
	usb_hdlr_register(&rc632_usb_in, OPENPCD_CMD_CLS_RC632);
}

This function call registers rc632_usb_in as the usb command handler for RC632 related commands.

The detailed usb protocal command for RC632 is defined in \firmware\include\openpcd.h

another version is defined in \firmware\src\pcd.h but not used anywhere.


3. How the firmware receive usb data?
The low-level usb communication handler and the high level usb command handler all use the global static defined in req_ctx.c:

	static struct req_ctx req_ctx[NUM_REQ_CTX];
	
This is a stack that keeps all the current usb communication context.
A function is defined in req_ctx.c to operate this stack:

	struct req_ctx __ramfunc *req_ctx_find_get(int large,
				 unsigned long old_state, 
				 unsigned long new_state)
				 
All other functions calls this req_ctx_find_get() function to operate req_ctx[] array, both read or write.

At the low-level usb communication side, the udp interrupt service routine is defined in pcd_emumerate.c:

	static void udp_irq(void)

This function is registered as irq in the udp_open() function in the same file.
when usb received data, a AT91C_UDP_EPINT1 interrupt is generated. In response to this interrupt, in the udp_irq(), req_ctx_find_get() is called to allocate a usb communication context from the stack:

			if (pkt_size >= AT91C_EP_IN_SIZE)
				rctx = req_ctx_find_get(1, RCTX_STATE_FREE,
						 RCTX_STATE_UDP_RCV_BUSY);
			else 
				rctx = req_ctx_find_get(0, RCTX_STATE_FREE,
						 RCTX_STATE_UDP_RCV_BUSY);

and then the data is read out from the fifo UDP fifo register and store into the rctx

		for (i = 0; i < pkt_size; i++)
			rctx->data[rctx->tot_len++] = pUDP->UDP_FDR[1];
			
Note that UDP_FDR can be ultimately found defined in /firmware/include/AT91SAM7.h.

4. How the firmware transmit usb data?
The standard USB protocal related data transmit is done Similar to the transmit process. 
When usb needs to transmit standard protocal related data, a AT91C_UDP_EPINT0 interrupt is generated.
this interrupt is also handled by udp_irq, and udp_ep0_handler() is called to do the actual job:

	if (isr & AT91C_UDP_EPINT0) {
		DEBUGI("EP0INT(Control) ");
		udp_ep0_handler();
	}

In ep0 handler, 

The normal payload data transmit is done through udp_refill_ep() function.
This function calls __udp_refill_ep(ep); and in this function, it first finds the specific request context related to the current ep, from the request context stack:

		rctx = req_ctx_find_get(0, epstate[ep].state_pending, 
					epstate[ep].state_busy);
					
And then the data in the request context is written to the fifo:

	for (i = start; i < end; i++) 
		pUDP->UDP_FDR[ep] = rctx->data[i];
	
Finally, in usb_handler.c, just call the udp_refill_ep() to send the data:

void usb_out_process(void)
{
	/* interrupts are likely to be more urgent than bulk */
	udp_refill_ep(3);
	udp_refill_ep(2);
}
